}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(11.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
class1<-kNN(xcx[,1:3],c(6,4),6)
class2<-kwNN(xcx[,1:3],c(6,4),6,1.0)
points(6, 4, pch = 21, bg = colors[class1], asp = 1)
points(6, 4, pch = 21, bg = colors[class2], asp = 1)
class1
class2
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(11.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
class1<-kNN(xcx[,1:3],c(6,4),6)
class2<-kwNN(xcx[,1:3],c(6,4),6,1.0)
points(6, 4, pch = 21, bg = colors[class1], asp = 1)
points(6, 4, pch = 21, bg = colors[class2], asp = 1)
class1
class2
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("setosa" = 0, "versicolor" = 0, "virginica" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(11.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
class1<-kNN(xcx[,1:3],c(6,8),6)
class2<-kwNN(xcx[,1:3],c(6,8),6,1.0)
points(6, 8, pch = 21, bg = colors[class1], asp = 1)
points(6, 8, pch = 21, bg = colors[class2], asp = 1)
class1
class2
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(11.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
class1<-kNN(xcx[,1:3],c(16,8),6)
class2<-kwNN(xcx[,1:3],c(16,8),6,1.0)
points(16, 8, pch = 21, bg = colors[class1], asp = 1)
points(16, 8, pch = 21, bg = colors[class2], asp = 1)
class1
class2
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(11.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
for(i in seq(1,20,1)){
for(j in seq(1,15,1)){
class <- kNN(xcx[, 1:3], c(i,j), k=6)
points(i, j, pch = 21, bg = "white", col = colors[class], asp = 1)
}
}
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(11.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
for(i in seq(1,20,1)){
for(j in seq(1,15,1)){
class <- kwNN(xcx[, 1:3], c(i,j), k=6,1.0)
points(i, j, pch = 21, bg = "white", col = colors[class], asp = 1)
}
}
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(19.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
for(i in seq(1,20,1)){
for(j in seq(1,15,1)){
class <- kwNN(xcx[, 1:3], c(i,j), k=6,1.0)
points(i, j, pch = 21, bg = "white", col = colors[class], asp = 1)
}
}
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
class1<-kNN(xcx[,1:3],c(16,8),6)
class2<-kwNN(xcx[,1:3],c(16,8),6,1.0)
points(16, 8, pch = 21, bg = colors[class1], asp = 1)
points(16, 8, pch = 21, bg = colors[class2], asp = 1)
class1
class2
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- table(classes)
class <- names(which.max(counts))
return (class)
}
kwNN <- function(xl, z, k, q)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k, n + 1]
counts <- c("smt1" = 0, "smt2" = 0)
for (i in 1:k){
w <- q^i
counts[[classes[i]]] <- counts[[classes[i]]] + w
}
class <- names(which.max(counts))
return (class)
}
colors <- c("smt1" = "red", "smt2" = "green3")
xcx <- data.frame("frst" = c(19.4,1.34,2,13.3,2.4,19.23,10.76,1.92),"scnd" = c(4.5,3.43,4.77,5.2,1.78,11.4,4.6,3.88),"thrd" = c("smt1","smt2","smt2","smt1","smt2","smt1","smt1","smt2"))
plot(xcx[, 1:2], pch = 21, bg = colors[xcx$thrd], asp = 1, main = "Check")
for(i in seq(1,20,1)){
for(j in seq(1,15,1)){
class <- kNN(xcx[, 1:3], c(i,j), k=6)
points(i, j, pch = 21, bg = "white", col = colors[class], asp = 1)
}
}
points(xcx[, 1], xcx[, 2], pch = 21, bg = colors[xcx$thrd], asp = 1)
iri<-iris
len<-nrow(iri)
#
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k[length(k)], n + 1]
#counts <- table(classes)
class <- c(seq(length(k)))
for (i in seq(length(k)))
{
counts <- table(orderedXl[1:i,n+1])
class[i] <- names(which.max(counts))
}
#class <- names(which.max(counts))
return (class)
}
LO<-c()
for(k in 1:9){
LOO<-0
for(i in 1:len){
obj<-iri[i,1:2]
resp<-iri[i,5]
clss<-(kNN(iri[-i,],obj,k))
if(clss!=resp){
LOO<-LOO+1
}
}
LO<-c(LO,LOO/len)
}
iri<-iris
len<-nrow(iri)
#
euclideanDistance <- function(u, v)
{
sqrt(sum((u - v)^2))
}
sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{
l <- nrow(xl)
#n <- ncol(xl) - 1
n<-2
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
}
orderedXl <- xl[order(distances[, 2]), ]
return (orderedXl)
}
kNN <- function(xl, z, k)
{
orderedXl <- sortObjectsByDist(xl, z)
n <- dim(orderedXl)[2] - 1
classes <- orderedXl[1:k[length(k)], n + 1]
#counts <- table(classes)
class <- c(seq(length(k)))
for (i in seq(length(k)))
{
counts <- table(orderedXl[1:i,n+1])
class[i] <- names(which.max(counts))
}
#class <- names(which.max(counts))
return (class)
}
# LO<-c()
# for(k in 1:9){
#   LOO<-0
#   for(i in 1:len){
#     obj<-iri[i,1:2]
#     resp<-iri[i,5]
#     clss<-(kNN(iri[-i,],obj,k))
#     if(clss!=resp){
#       LOO<-LOO+1
#     }
#   }
#   LO<-c(LO,LOO/len)
# }
# which.min(LO)
#
# plot(seq(9),LO,type = "o",main = "LOO from k", xlab = "k-values",ylab = "LOO-values",col = "red")
colors <- c("setosa" = "red", "versicolor" = "green3","virginica" = "blue")
plot(iris[, 3:4], pch = 21, bg = colors[iris$Species], asp = 1, main = "kNN")
for(i in seq(1,7,0.1)){
for(j in seq(0,2.5,0.1)){
class <- kNN(iris[, 3:5], c(i,j), k=6)
points(i, j, pch = 21, bg = "white", col = colors[class], asp = 1)
}
}
savehistory("~/R/History.Rhistory")
